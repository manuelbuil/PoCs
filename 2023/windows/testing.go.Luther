//go:build windows
// +build windows
package main

import (
    "bytes"
    "fmt"
    "os"
    "runtime"

    "github.com/Microsoft/go-winio/pkg/etw"
    "github.com/Microsoft/go-winio/pkg/etwlogrus"
    "github.com/Microsoft/go-winio/pkg/guid"
    "github.com/pkg/errors"
    "golang.org/x/sys/windows"
    "golang.org/x/sys/windows/svc"
    "golang.org/x/sys/windows/svc/eventlog"
    "github.com/sirupsen/logrus"

    "github.com/rancher/wins/pkg/converters"
)

func main() {
    var serviceName = "MyGoService"

    p, err := etw.NewProvider(serviceName, etwCallback)
    if err != nil {
        fmt.Println(err)
    }

    hook, err := etwlogrus.NewHookFromProvider(p)
    if err != nil {
	    fmt.Println(err)
    }
    logrus.AddHook(hook)

    // Open the event log for writing
    eLog, err := eventlog.Open(serviceName)
    if err != nil {
        fmt.Println(err)
    }

    logrus.AddHook(&eventLogHook{log: eLog})

    logrus.Info("HELLO!!!")

    // Register the service with the event log
    err = svc.Run(serviceName, &myHandler{})
    if err != nil {
        fmt.Println(err)
    }
}

type myHandler struct{}

func (m *myHandler) Execute(args []string, r <-chan svc.ChangeRequest, changes chan<- svc.Status) (bool, uint32) {
    // Your service logic here
    logrus.Info("Service started")

    for {
        select {
        case c := <-r:
            switch c.Cmd {
            case svc.Stop, svc.Shutdown:
                logrus.Info("Service stopping")
                // Stop your service logic here
                return false, 0
            }
        }
    }
}

func etwCallback(_ guid.GUID, state etw.ProviderState, _ etw.Level, _ uint64, _ uint64, _ uintptr) {
	if state == etw.ProviderStateCaptureState {
		logrus.Infof("=== BEGIN goroutine stack dump ===\n%s\n=== END goroutine stack dump ===", dumpStacks())
	}
}

// DumpStacks returns up to (1 << 15) bytes of the current processes stack trace as a string
func dumpStacks() string {
	var (
		buf       []byte
		stackSize int
		bufferLen = 1 << 15
	)
	for stackSize == len(buf) {
		buf = make([]byte, bufferLen)
		stackSize = runtime.Stack(buf, true)
		bufferLen *= 2
	}
	buf = buf[:stackSize]
	return converters.UnsafeBytesToString(buf)
}

const (
	// These should match the values in event_messages.mc.
	eventInfo  = 1
	eventWarn  = 1
	eventError = 1
	eventDebug = 2
	eventPanic = 3
	eventFatal = 4

	eventExtraOffset = 10 // Add this to any event to get a string that supports extended data
)

type eventLogHook struct {
	log *eventlog.Log
}

func (h *eventLogHook) Levels() []logrus.Level {
	return logrus.AllLevels
}

func (h *eventLogHook) Fire(e *logrus.Entry) error {
	var (
		etype uint16
		eid   uint32
	)

	switch e.Level {
	case logrus.PanicLevel:
		etype = windows.EVENTLOG_ERROR_TYPE
		eid = eventPanic
	case logrus.FatalLevel:
		etype = windows.EVENTLOG_ERROR_TYPE
		eid = eventFatal
	case logrus.ErrorLevel:
		etype = windows.EVENTLOG_ERROR_TYPE
		eid = eventError
	case logrus.WarnLevel:
		etype = windows.EVENTLOG_WARNING_TYPE
		eid = eventWarn
	case logrus.InfoLevel:
		etype = windows.EVENTLOG_INFORMATION_TYPE
		eid = eventInfo
	case logrus.DebugLevel:
		etype = windows.EVENTLOG_INFORMATION_TYPE
		eid = eventDebug
	default:
		return errors.New("unknown level")
	}

	// If there is additional data, include it as a second string.
	exts := ""
	if len(e.Data) > 0 {
		fs := bytes.Buffer{}
		for k, v := range e.Data {
			fs.WriteString(k)
			fs.WriteByte('=')
			fmt.Fprint(&fs, v)
			fs.WriteByte(' ')
		}

		exts = fs.String()[:fs.Len()-1]
		eid += eventExtraOffset
	}

	if h.log == nil {
		fmt.Fprintf(os.Stderr, "%s [%s]\n", e.Message, exts)
		return nil
	}

	var (
		ss  [2]*uint16
		err error
	)

	ss[0], err = windows.UTF16PtrFromString(e.Message)
	if err != nil {
		return err
	}

	count := uint16(1)
	if exts != "" {
		ss[1], err = windows.UTF16PtrFromString(exts)
		if err != nil {
			return err
		}

		count++
	}

	return windows.ReportEvent(h.log.Handle, etype, 0, eid, 0, count, 0, &ss[0], nil)
}
