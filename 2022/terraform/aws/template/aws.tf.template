terraform {
    required_version = ">=0.12"
    required_providers {
        aws = {
        source  = "hashicorp/aws"
        version = "~>3.0"
        }
    }
}

provider "aws" {
    region = var.region
    access_key = var.access_key
    secret_key = var.secret_key
}

// the netwok where instances will connect
resource "aws_vpc" "vpc" {
    cidr_block = "10.11.0.0/16"
    assign_generated_ipv6_cidr_block = true
    
    enable_dns_support = true
    enable_dns_hostnames = true

    tags = {
        Name = "rke2-k3s-networking"
    }
}

// what will provide internet access to the vpc
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "mbuil-igw"
  }
}

resource "aws_default_route_table" "myRouter" {
  default_route_table_id = aws_vpc.vpc.default_route_table_id

  // All traffic (except for the vpc traffic) goes out using the internet gateway
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  // All traffic (except for the vpc traffic) goes out using the internet gateway
  route {
    ipv6_cidr_block = "::/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "mbuil-default-route"
  }

}

resource "aws_subnet" "dualStack-subnet" {
    vpc_id = aws_vpc.vpc.id
    cidr_block = "${cidrsubnet(aws_vpc.vpc.cidr_block, 12, 0)}"
    map_public_ip_on_launch = true

    ipv6_cidr_block = "${cidrsubnet(aws_vpc.vpc.ipv6_cidr_block, 8, 1)}"
    assign_ipv6_address_on_creation = true

    tags = {
        Name = "mbuil-dualStack-subnet"
    }
}

resource "aws_security_group" "allow_k8s" {
  name        = "allow_k8s"
  description = "Allow K8s communications"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    description      = "SSH from VPC"
    to_port          = 22
    from_port        = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "HTTP from VPC"
    to_port          = 80
    from_port        = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "HTTPS from VPC"
    to_port          = 443
    from_port        = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description = "Find nodes"
    from_port   = 43210
    to_port     = 43210
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  ingress {
    description = "Supervisor connection"
    from_port   = 6443
    to_port     = 6443
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  ingress {
    description = "Connection to kubelet"
    from_port   = 10250
    to_port     = 10250
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  // vxlan
  ingress {
    description = "vxlan"
    from_port   = 8472
    to_port     = 8472
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  // vxlan
  ingress {
    description = "vxlan"
    from_port   = 4789
    to_port     = 8472
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  ingress {
    description = "Supervisor RKE2"
    from_port   = 9345
    to_port     = 9345
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  // etcd
  ingress {
    description = "etcd"
    from_port   = 2379
    to_port     = 2381
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  // wireguard
  ingress {
    description = "wireguard"
    from_port   = 51820
    to_port     = 51821
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  // port 9099 for Calico healthcheck
  ingress {
    description = "Calico healthcheck"
    from_port   = 9098
    to_port     = 9099
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]   
  }

  // Cilium healthcheck
  ingress {
    description = "Cilium healthcheck"
    from_port   = 4240
    to_port     = 4240
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]   
  }

  // Typha
  ingress {
    description = "Typha"
    from_port   = 5473
    to_port     = 5473
    protocol    = "tcp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]   
  }

  ingress {
    from_port   = -1
    to_port     = -1
    protocol    = "icmp"
    cidr_blocks = [aws_subnet.dualStack-subnet.cidr_block]
  }

  tags = {
    Name = "allow_k8s"
  }
}

resource "aws_instance" "myInstance" {
  count         = %COUNT%
  ami           = "ami-0bb457e0c5095fa9d"
  instance_type = "t3.medium"

  subnet_id = aws_subnet.dualStack-subnet.id

  key_name = "mbuil"

  vpc_security_group_ids = [aws_security_group.allow_k8s.id]

  root_block_device {
    volume_size = 20
    volume_type = "standard"
  }

  user_data = filebase64(%CLOUDINIT%)

  tags = {
    Name = "terraform-mbuil-vm${count.index}"
  }
}

output "vpc_id" {
    value = aws_vpc.vpc.id
}

output "subnet_id" {
    value = aws_subnet.dualStack-subnet.id
}

output "publicIP" {
    value = aws_instance.myInstance[*].public_ip
}
