terraform {
    required_version = ">=0.12"
    required_providers {
        aws = {
        source  = "hashicorp/aws"
        version = "~>3.0"
        }
    }
}

provider "aws" {
    region = var.regiongpu
    access_key = var.access_key
    secret_key = var.secret_key
}

// the netwok where instances will connect
resource "aws_vpc" "vpc" {
    cidr_block = "10.11.0.0/16"
    assign_generated_ipv6_cidr_block = true
    
    enable_dns_support = true
    enable_dns_hostnames = true

    tags = {
        Name = "rke2-k3s-terraform"
    }
}

// what will provide internet access to the vpc
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "mbuil-igw"
  }
}

resource "aws_default_route_table" "myRouter" {
  default_route_table_id = aws_vpc.vpc.default_route_table_id

  // All traffic (except for the vpc traffic) goes out using the internet gateway
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  // All traffic (except for the vpc traffic) goes out using the internet gateway
  route {
    ipv6_cidr_block = "::/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "mbuil-default-route"
  }

}

resource "aws_subnet" "dualStack-subnet" {
    vpc_id = aws_vpc.vpc.id
    cidr_block = "${cidrsubnet(aws_vpc.vpc.cidr_block, 12, 0)}"
    map_public_ip_on_launch = true

    ipv6_cidr_block = "${cidrsubnet(aws_vpc.vpc.ipv6_cidr_block, 8, 1)}"
    assign_ipv6_address_on_creation = true

    tags = {
        Name = "mbuil-dualStack-subnet"
    }
}

resource "aws_security_group" "allow_k8s" {
  name        = "allow_k8s"
  description = "Allow K8s communications"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    description      = "SSH from VPC"
    to_port          = 22
    from_port        = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "HTTP from VPC"
    to_port          = 80
    from_port        = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "HTTPS from VPC"
    to_port          = 443
    from_port        = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    description      = "All traffic"
    to_port          = 0
    from_port        = 0
    protocol         = "-1"
    cidr_blocks      = [aws_subnet.dualStack-subnet.cidr_block]
  }

  tags = {
    Name = "allow_k8s"
  }
}

resource "aws_instance" "myInstance" {
  count         = 2
  ami           = "ami-052b6d4907729b057"
  instance_type = "t3.large"

  subnet_id = aws_subnet.dualStack-subnet.id

  key_name = "mbuil-key"

  vpc_security_group_ids = [aws_security_group.allow_k8s.id]

  root_block_device {
    volume_size = 30
    volume_type = "standard"
  }

  user_data = filebase64("../cloud-init-scripts/demoSUSECON.sh")

  tags = {
    Name = "terraform-mbuil-vm${count.index}"
  }
}

resource "aws_instance" "myGPUInstance" {
  count         = 1
  ami           = "ami-052b6d4907729b057"
  instance_type = "g4dn.xlarge"

  subnet_id = aws_subnet.dualStack-subnet.id

  key_name = "mbuil-key"

  vpc_security_group_ids = [aws_security_group.allow_k8s.id]

  root_block_device {
    volume_size = 55
    volume_type = "standard"
  }

  user_data = filebase64("../cloud-init-scripts/installGPUSLES.sh")

  tags = {
    Name = "terraform-mbuil-vm-gpu"
  }
}

output "vpc_id" {
    value = aws_vpc.vpc.id
}

output "subnet_id" {
    value = aws_subnet.dualStack-subnet.id
}

output "publicIP" {
    value = aws_instance.myInstance[*].public_ip
}

output "publicIPGPU" {
    value = aws_instance.myGPUInstance[0].public_ip
}
